# Pipeline will be triggered for PR & any updates on the PR on all branches 

pr:
  autoCancel: true
  branches:
    include:
    - '*'
  drafts: true

# Not triggering for CI since it is triggered for PRs 
trigger: none

# Define parallel jobs that run build script for specified targets
jobs:
- job: 'Validate_Pull_Request'
  strategy:
    maxParallel: 3
    matrix:
     IOS_LIB:
        target: "ios_library"
     MAC_LIB:
        target: "mac_library"
     VISION_LIB:
        target: "vision_library"
  displayName: Validate Pull Request
  pool:
    vmImage: 'macos-14'
    timeOutInMinutes: 30

  steps:
  - task: CmdLine@2
    displayName: Installing dependencies
    inputs:
      script: |
        gem install xcpretty slather -N
      failOnStderr: true
  - checkout: self
    clean: true
    submodules: true
    fetchDepth: 1
    persistCredentials: false
  - task: Bash@3
    displayName: 'Select Xcode version'
    inputs:
      targetType: 'inline'
      script: '/bin/bash -c "sudo xcode-select -s /Applications/Xcode_15.4.app"'
  - task: Bash@3
    displayName: Removing any lingering codecov files. These can cause issues when the xcode version changes
    inputs:
      targetType: 'inline'
      script: |
        find . -name "*.gcda" -print0 | xargs -0 rm
# The following is needed to install the visionOS SDK on macos-14 vm image which
# doesn't have visionOS installed by default.
# TODO: Remove when macos-14-arm64 is supported on ADO.
  - task: Bash@3
    displayName: download visionOS SDK
    inputs:
      targetType: 'inline'
      script: |
        echo "with brackets: ${target}"
        echo "with parens: $(target)"
        if [ $(target) == 'vision_library']
        then
            echo "Downloading simulator for visionOS"
            sudo xcode-select -s /Applications/Xcode_15.4.app/Contents/Developer
            defaults write com.apple.dt.Xcode AllowUnsupportedVisionOSHost -bool YES
            defaults write com.apple.CoreSimulator AllowUnsupportedVisionOSHost -bool YES
            xcodebuild -downloadPlatform visionOS
        else
            echo "Not visionOS job, no download needed"
        fi
      failOnStderr: false
  - task: Bash@3
    displayName: Run CPP script
    inputs:
      targetType: 'inline'
      script: |
        python ./scripts/update_xcode_config_cpp_checks.py
      failOnStderr: true
  - task: Bash@3
    displayName: Run Build script & check for Errors
    inputs:
      targetType: 'inline'
      script: |
        { output=$(./build.py --no-clean --show-build-settings --target $(target) 2>&1 1>&3-) ;} 3>&1
        final_status=$(<./build/status.txt)
        echo "FINAL STATUS  = ${final_status}"
        echo "POSSIBLE ERRORS: ${output}"
        
        if [ $final_status != "0" ]; then
          echo "Build & Testing Failed! \n ${output}" >&2
        fi
      failOnStderr: true
  - task: Bash@3
    condition: always()
    displayName: Cleanup
    inputs:
      targetType: 'inline'
      script: |
        rm -rf ./build/status.txt
  - task: PublishTestResults@2
    condition: always()
    displayName: Publish Test Report
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: '$(Agent.BuildDirectory)/s/build/reports/*'
      failTaskOnFailedTests: true
      testRunTitle: 'Test Run - $(target)'
  
