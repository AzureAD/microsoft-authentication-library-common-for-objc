parameters:
- name: platform
  type: string
- name: arch
  type: string
- name: configuration
  type: string
- name: additionalBuildArgs
  type: string
  default: ''
- name: skipPublish
  type: boolean
  default: false
- name: measureTime
  type: boolean
  default: false
- name: env
  type: object
  default: {}
- name: buildArtifactsName
  type: string

steps:
- ${{ if parameters.measureTime }}:
  - task: PythonScript@0
    displayName: Get build start time
    inputs:
      scriptSource: inline
      script: |
        import time
        print(f'##vso[task.setvariable variable=buildStartTime;]{time.time()}')

- task: PythonScript@0
  name: Build
  displayName: 'Build ${{ parameters.arch }} ${{ parameters.configuration }} ${{ parameters.platform }}'
  inputs:
    scriptPath: build.py
    arguments: '--clean --arch ${{ parameters.arch }} --configuration ${{ parameters.configuration }} --platform ${{ parameters.platform }} --djinni hashfail ${{ parameters.additionalBuildArgs }}'
  env:
    ${{ insert }}: ${{ parameters.env }}

- ${{ if parameters.measureTime }}:
  - task: PythonScript@0
    displayName: Get build end time
    inputs:
      scriptSource: inline
      script: |
        import time
        print(f'##vso[task.setvariable variable=buildEndTime;]{time.time()}')

- ${{ if not(parameters.skipPublish) }}:
  # Done in two steps because the publish in one step didn't work
  - task: CopyFiles@2
    displayName: Copy MSAL build artifacts to the artifact staging directory
    inputs:
      contents: '_install/**/bin/**'
      targetFolder: '$(Build.ArtifactStagingDirectory)/bin'
      overwrite: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifacts: MSAL build artifacts'
    inputs:
      PathtoPublish: '$(Build.ArtifactStagingDirectory)/bin'
      ArtifactName: ${{ parameters.buildArtifactsName }}

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: Build logs'
  inputs:
    PathtoPublish: '_logs'
    ArtifactName: 'Build Logs'
  continueOnError: true
